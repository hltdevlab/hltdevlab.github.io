{"version":3,"sources":["AddItems/addItems.js","AddPeople/addPeople.js","CheckboxGroup/checkboxGroup.js","Ledger.js","Trasaction.js","utils.js","WhoSharing/whoSharing.js","WhatCost/whatCost.js","RadioGroup/radioGroup.js","Combobox/combobox.js","WhoPaid/whoPaid.js","App.js","reportWebVitals.js","index.js"],"names":["AddItems","props","id","className","title","fieldName","listDidUpdate","useState","items","_setItems","errorMsg","setErrorMsg","itemsRef","useRef","itemInputRef","useEffect","console","log","nameInput","current","addEventListener","onKeyup","removeEventListener","e","keyCode","onAdd","updateErrorMsg","isDuplicated","value","includes","data","focus","htmlFor","type","ref","onClick","defaultProps","AddPeople","CheckboxGroup","name","options","onChange","selectAllToggle","setSelectAllToggle","setValue","thisRef","thisElem","currentTarget","generateValue","newValue","querySelectorAll","forEach","checkbox","checked","map","option","derivedItemId","toLowerCase","split","join","document","Ledger","this","transactions","payableTransactions","transaction","descriptionToAdd","getDescription","amountToAdd","getAmount","foundTransaction","find","payableTransaction","existingAmount","setAmount","str","toString","Transaction","description","amount","__to2Decimal","floatValue","Math","round","generateId","isArrayEmpty","array","undefined","length","isObjectEmpty","object","JSON","stringify","calculateReturnText","people","whoSharingJson","whatCostJson","whoPaidJson","ledgers","calculate","text","Object","entries","person","item","cost","addTransaction","Trasaction","isSharedBy","peopleSharingThisItem","filter","costPerPerson","ledger","getTransactions","transction","personToPay","addPayableTransaction","WhoSharing","itemName","checkboxGroupElem","WhatCost","inputRef","step","min","inputElem","parseFloat","isNaN","max","validateInput","RadioGroup","derivedOptionId","onSelect","Combobox","selectRef","alteredOptions","selectElem","i","disabled","WhoPaid","comboboxElem","App","setPeople","setItems","setWhoSharingJson","setWhatCostJson","setWhoPaidJson","whoSharingElem","whoPaidElem","whatCostElem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7039d6b0.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport './addItems.css';\r\n\r\nfunction AddItems(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    fieldName,\r\n    listDidUpdate\r\n  } = props;\r\n  \r\n  const [items, _setItems] = useState([]);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const itemsRef = useRef(items);\r\n  const setItems = (data) => {\r\n    itemsRef.current = data;\r\n    _setItems(data);\r\n  };\r\n\r\n  const itemInputRef = useRef(null);\r\n\r\n  // Lifecycle useEffect\r\n  useEffect(() => {\r\n    console.log('component did mount');\r\n    const nameInput = itemInputRef.current;\r\n    nameInput.addEventListener('keyup', onKeyup);\r\n\r\n    return () => {\r\n      console.log('component will unmount');\r\n      nameInput.removeEventListener('keyup', onKeyup);\r\n    };\r\n  }, []);\r\n\r\n  // Updating container when items changes\r\n  useEffect(() => {\r\n    console.log('Updating container: ' + items);\r\n    listDidUpdate(items);\r\n  }, [items]);\r\n  \r\n  // handler functions\r\n  const onKeyup = (e) => {\r\n    if (13 === e.keyCode) {\r\n      onAdd();\r\n    }\r\n\r\n    updateErrorMsg();\r\n  };\r\n\r\n  const updateErrorMsg = () => {\r\n    const nameInput = itemInputRef.current;\r\n    if (isDuplicated(nameInput.value)) {\r\n      setErrorMsg(`${fieldName} already exist!`);\r\n    }\r\n    else {\r\n      setErrorMsg('');\r\n    }\r\n  };\r\n\r\n  const isDuplicated = (value) => {\r\n    return itemsRef.current.includes(value);\r\n  };\r\n\r\n  const onAdd = (e) => {\r\n    const nameInput = itemInputRef.current;\r\n    const value = nameInput.value;\r\n    nameInput.focus();\r\n    \r\n    if (!isDuplicated(value)) {\r\n      setItems([...itemsRef.current, value]);\r\n      nameInput.value = '';\r\n      updateErrorMsg();\r\n    }\r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {title}\r\n      </h1>\r\n\r\n      <label\r\n        className={`${className}__lbl`}\r\n        htmlFor={`${id}__input`}\r\n      >\r\n        <span\r\n          className={`${className}__lbl-span`}\r\n        >\r\n          {`${fieldName}:`}\r\n        </span>\r\n        <input\r\n          id={`${id}__input`}\r\n          className={\r\n            errorMsg ? \r\n            `${className}__input-txt ${className}__input-txt--err`\r\n            : `${className}__input-txt`\r\n          }\r\n          type=\"text\"\r\n          ref={itemInputRef}\r\n        />\r\n        <span\r\n          className={`err-msg`}\r\n        >\r\n          {errorMsg}\r\n        </span>\r\n      </label>\r\n\r\n      <button\r\n        className={`${className}__btn`}\r\n        onClick={onAdd}\r\n      >\r\n        Add\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nAddItems.defaultProps = {\r\n  id: 'add-items',\r\n  className: 'add-items',\r\n  title: 'Adding Items...',\r\n  fieldName: 'Item',\r\n  listDidUpdate: () => {}\r\n};\r\n\r\nexport default AddItems;\r\n","import AddItems from '../AddItems/addItems';\r\n\r\nfunction AddPeople(props) {\r\n  // renderer\r\n  return (\r\n    <AddItems\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nAddPeople.defaultProps = {\r\n  id: 'add-people',\r\n  title: 'Adding People...',\r\n  fieldName: 'Name',\r\n  listDidUpdate: () => {}\r\n};\r\n\r\nexport default AddPeople;\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\nfunction CheckboxGroup(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    name,\r\n    options,\r\n    onChange\r\n  } = props;\r\n\r\n  const [selectAllToggle, setSelectAllToggle] = useState(false);\r\n  const [value, setValue] = useState({});\r\n\r\n  const thisRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  const generateValue = () => {\r\n    const thisElem = thisRef.current;\r\n    let newValue = {};\r\n    const checkboxes = thisElem.querySelectorAll('input[type=\"checkbox\"]');\r\n    checkboxes.forEach((checkbox) => {\r\n      newValue[checkbox.value] = checkbox.checked;\r\n    });\r\n    setValue(newValue);\r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      {\r\n        options.map(\r\n          (option) => {\r\n            const derivedItemId =\r\n              option.toLowerCase()\r\n              .split(' ').join('-')\r\n              .split('_').join('-');\r\n            \r\n            return (\r\n              <label\r\n                key={option}\r\n                htmlFor={`${id}__${derivedItemId}`}\r\n                >\r\n                <span>{`${option}:`}</span>\r\n                <input\r\n                  id={`${id}__${derivedItemId}`}\r\n                  className={`${className}__checkbox`}\r\n                  type=\"checkbox\"\r\n                  name={name}\r\n                  value={option}\r\n                  onChange={(e) => {\r\n                    generateValue();\r\n                  }}\r\n                />\r\n              </label>\r\n            );\r\n          }\r\n        )\r\n      }\r\n      <button\r\n        onClick={() => {\r\n          const checkboxes = document.querySelectorAll(`#${id} input[type=\"checkbox\"]`);\r\n          checkboxes.forEach((checkbox) => {\r\n            checkbox.checked = !selectAllToggle;\r\n          });\r\n          setSelectAllToggle(!selectAllToggle);\r\n\r\n          generateValue();\r\n        }}\r\n      >\r\n        Select/Deselect All\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nCheckboxGroup.defaultProps = {\r\n  id: '',\r\n  className: 'checkbox-group',\r\n  name: '',\r\n  options: [],\r\n  onChange: () => {}\r\n};\r\n\r\nexport default CheckboxGroup;\r\n","class Ledger {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.transactions = [];\r\n        this.payableTransactions = [];\r\n    }\r\n\r\n    getTransactions() {\r\n        return this.transactions;\r\n    }\r\n\r\n    addTransaction(transaction) {\r\n        this.transactions = [...this.transactions, transaction];\r\n    }\r\n\r\n    addPayableTransaction(transaction) {\r\n        const descriptionToAdd = transaction.getDescription();\r\n        const amountToAdd = transaction.getAmount();\r\n\r\n        const foundTransaction = this.payableTransactions.find((payableTransaction) => {\r\n            const existingDescription = payableTransaction.getDescription();\r\n            return (existingDescription === descriptionToAdd);\r\n        });\r\n\r\n        if (foundTransaction) {\r\n            // update existing payableTransactions\r\n            const existingAmount = foundTransaction.getAmount();\r\n            foundTransaction.setAmount(\r\n                existingAmount + amountToAdd\r\n            );\r\n        }\r\n        else {\r\n            // add new entry to payableTransactions\r\n            this.payableTransactions = [...this.payableTransactions, transaction];\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        let str = `${this.name}:\\n`;\r\n        this.transactions.forEach((transaction) => {\r\n            str += `  ${transaction.toString()}\\n`\r\n        });\r\n        str += `  ----------\\n`;\r\n        this.payableTransactions.forEach((transaction) => {\r\n            str += `  ${transaction.toString()}\\n`\r\n        });\r\n        str += `  ==========\\n\\n`;\r\n        return str;\r\n    }\r\n};\r\n\r\nexport default Ledger;","class Transaction {\r\n    constructor(description, amount) {\r\n        this.__to2Decimal = (floatValue) => {\r\n            //console.log(floatValue * 100);\r\n            //console.log(Math.round(floatValue * 100));\r\n            //console.log(Math.round(floatValue * 100) / 100);\r\n            return Math.round(floatValue * 100) / 100;\r\n        };\r\n\r\n        this.description = description;\r\n        this.amount = amount;\r\n    }\r\n\r\n    getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n    getAmount() {\r\n        return this.amount;\r\n        // return this.__to2Decimal(this.amount);\r\n    }\r\n\r\n    setAmount(amount) {\r\n        this.amount = amount;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.description}: $${this.__to2Decimal(this.amount)}`;\r\n    }\r\n};\r\n\r\nexport default Transaction;","import Ledger from './Ledger';\r\nimport Transaction from './Trasaction';\r\nimport Trasaction from './Trasaction';\r\n\r\nexport const generateId = (name) => {\r\n    return name.toLowerCase()\r\n        .split(' ').join('-')\r\n        .split('_').join('-');\r\n};\r\n\r\nexport const isArrayEmpty = (array) => {\r\n    return (\r\n        array === undefined\r\n        || array === null\r\n        || array.length === 0\r\n    );\r\n};\r\n\r\nexport const isObjectEmpty = (object) => {\r\n    return (\r\n        object === undefined\r\n        || object === null\r\n        || JSON.stringify({}) === JSON.stringify(object)\r\n    );\r\n};\r\n\r\nexport const calculateReturnText = ({\r\n    people,\r\n    items,\r\n    whoSharingJson,\r\n    whatCostJson,\r\n    whoPaidJson\r\n}) => {\r\n    const ledgers = calculate({\r\n        people,\r\n        items,\r\n        whoSharingJson,\r\n        whatCostJson,\r\n        whoPaidJson\r\n    });\r\n\r\n    if (!ledgers) {\r\n        return '';\r\n    }\r\n\r\n    let text = '';\r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        text += ledger.toString()\r\n    }\r\n    return text;\r\n};\r\n\r\n\r\nexport const calculate = ({\r\n    people,\r\n    items,\r\n    whoSharingJson,\r\n    whatCostJson,\r\n    whoPaidJson\r\n}) => {\r\n    if (\r\n        isArrayEmpty(people)\r\n        || isArrayEmpty(items)\r\n        || isObjectEmpty(whoSharingJson)\r\n        || isObjectEmpty(whatCostJson)\r\n        || isObjectEmpty(whoPaidJson)\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    \r\n    const ledgers = {};\r\n    people.forEach((person) => {\r\n        ledgers[person] = new Ledger(person);\r\n    });\r\n\r\n    items.forEach((item) => {\r\n        const cost = whatCostJson[item];\r\n        const person = whoPaidJson[item];\r\n\r\n        ledgers[person].addTransaction(\r\n            new Trasaction(item, (-cost))\r\n        );\r\n    });\r\n\r\n    items.forEach((item) => {\r\n        const cost = whatCostJson[item];\r\n        const isSharedBy = whoSharingJson[item];\r\n\r\n        const peopleSharingThisItem = people.filter(\r\n            (person) => (isSharedBy[person])\r\n        );\r\n\r\n        const costPerPerson = cost / peopleSharingThisItem.length;\r\n\r\n        peopleSharingThisItem.forEach((person) => {\r\n            ledgers[person].addTransaction(\r\n                new Trasaction(item, costPerPerson)\r\n            );\r\n        });\r\n    });\r\n\r\n    \r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        const transctions = ledger.getTransactions();\r\n        transctions.filter(\r\n            // filter all transaction that is negative,\r\n            // which means initially paid transaction.\r\n            (transction) => (transction.getAmount() > 0)\r\n        ).filter(\r\n            // filter all transaction that is paid by\r\n            // this person.\r\n            (transction) => {\r\n                const item = transction.getDescription();\r\n                const personToPay = whoPaidJson[item];\r\n                return (person != personToPay);\r\n            }\r\n        ).forEach((transction) => {\r\n            const item = transction.getDescription();\r\n            const amount = transction.getAmount();\r\n            const personToPay = whoPaidJson[item];\r\n            ledger.addPayableTransaction(\r\n                new Transaction(`pay to ${personToPay}`, amount)\r\n            );\r\n        });\r\n    }\r\n\r\n    console.log(JSON.stringify(ledgers, null, 2));\r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        console.log(ledger.toString());\r\n    }\r\n\r\n    return ledgers;\r\n};\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport CheckboxGroup from '../CheckboxGroup/checkboxGroup';\r\nimport { generateId } from '../utils';\r\nimport './whoSharing.css';\r\n\r\nfunction WhoSharing(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    itemName,\r\n    people,\r\n    onChange\r\n  } = props;\r\n\r\n  const [value, setValue] = useState({});\r\n  const thisRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {`${title} `}\r\n        <span\r\n          className={`${className}__item-name`}\r\n        >\r\n          {itemName}\r\n        </span>\r\n      </h1>\r\n\r\n      <CheckboxGroup\r\n        id={generateId(itemName)}\r\n        name={itemName}\r\n        options={people}\r\n        onChange={(e) => {\r\n          const checkboxGroupElem = e.currentTarget;\r\n          const newValue = {};\r\n          newValue[itemName] = checkboxGroupElem.value;\r\n          setValue(newValue);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nWhoSharing.defaultProps = {\r\n  id: '',\r\n  className: 'who-sharing',\r\n  title: 'Who Sharing...',\r\n  itemName: '',\r\n  people: [],\r\n  onChange: () => {}\r\n};\r\n\r\nexport default WhoSharing;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport './whatCost.css';\r\n\r\nfunction WhatCost(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    itemName,\r\n    fieldName,\r\n    onChange\r\n  } = props;\r\n  \r\n  const [value, setValue] = useState({});\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const thisRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n  \r\n  // handler functions\r\n  const validateInput = () => {\r\n    const inputElem = inputRef.current;\r\n    const floatValue = parseFloat(inputElem.value);\r\n\r\n    if (isNaN(floatValue)) {\r\n      setErrorMsg('Please input valid number.');\r\n    }\r\n    else if (inputElem.min && floatValue < inputElem.min) {\r\n      setErrorMsg(`Value must not be lesser than ${inputElem.min}.`);\r\n    }\r\n    else if (inputElem.max && floatValue > inputElem.max) {\r\n      setErrorMsg(`Value must not be more than ${inputElem.max}.`);\r\n    }\r\n    else {\r\n      setErrorMsg('');\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const _onChange = (e) => {\r\n    validateInput();\r\n    const inputElem = inputRef.current;\r\n    const newValue = {};\r\n    const floatValue = parseFloat(inputElem.value);\r\n    newValue[itemName] = floatValue;\r\n    setValue(newValue);\r\n    \r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {`${title} `}\r\n        <span\r\n          className={`${className}__item-name`}\r\n        >\r\n          {itemName}\r\n        </span>\r\n      </h1>\r\n\r\n      <label\r\n        className={`${className}__lbl`}\r\n        htmlFor={`${id}__input`}\r\n      >\r\n        <span\r\n          className={`${className}__lbl-span`}\r\n        >\r\n          {`${fieldName}:`}\r\n        </span>\r\n        <input\r\n          id={`${id}__input`}\r\n          className={\r\n            errorMsg ? \r\n            `${className}__input-txt ${className}__input-txt--err`\r\n            : `${className}__input-txt`\r\n          }\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          ref={inputRef}\r\n          onChange={_onChange}\r\n        />\r\n        <span\r\n          className={`err-msg`}\r\n        >\r\n          {errorMsg}\r\n        </span>\r\n      </label>\r\n\r\n      <button\r\n        className={`${className}__btn`}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nWhatCost.defaultProps = {\r\n  id: 'what-cost',\r\n  className: 'what-cost',\r\n  title: 'What is the Cost of ...',\r\n  itemName: '',\r\n  fieldName: 'Cost ($)',\r\n  onChange: () => {}\r\n};\r\n\r\nexport default WhatCost;\r\n","import { useState } from \"react\";\r\nimport { generateId } from '../utils';\r\n\r\nfunction RadioGroup(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    name,\r\n    options\r\n  } = props;\r\n\r\n  const [selectAllToggle, setSelectAllToggle] = useState(false);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n    >\r\n      {\r\n        options.map(\r\n          (option) => {\r\n            const derivedOptionId = generateId(option);\r\n            \r\n            return (\r\n              <label\r\n                key={option}\r\n                htmlFor={`${id}__${derivedOptionId}`}\r\n                >\r\n                <span>{`${option}:`}</span>\r\n                <input\r\n                  id={`${id}__${derivedOptionId}`}\r\n                  className={`${className}__radio`}\r\n                  name={name}\r\n                  type=\"radio\"\r\n                />\r\n              </label>\r\n            );\r\n          }\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nRadioGroup.defaultProps = {\r\n  id: '',\r\n  className: 'radio-group',\r\n  name: '',\r\n  options: [],\r\n  onSelect: () => {}\r\n};\r\n\r\nexport default RadioGroup;\r\n","\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport AddItems from '../AddItems/addItems';\r\n\r\nfunction Combobox(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    fieldName,\r\n    options,\r\n    errorMsg,\r\n    onChange\r\n  } = props;\r\n\r\n  const [value, setValue] = useState(null);\r\n\r\n  const thisRef = useRef(null);\r\n  const selectRef = useRef(null);\r\n  \r\n  const alteredOptions = [\"Please choose...\", ...options];\r\n\r\n  useEffect(() => {\r\n    const selectElem = selectRef.current;\r\n    selectElem.value = alteredOptions[0]; // set initial value\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  // renderer\r\n  return (\r\n    <label\r\n      htmlFor={id}\r\n      ref={thisRef}\r\n    >\r\n      <span>\r\n        {fieldName ? `${fieldName}:` : ''}\r\n      </span>\r\n      <select\r\n        id={id}\r\n        className={className}\r\n        ref={selectRef}\r\n        onChange={(e) => {\r\n          const selectElem = selectRef.current;\r\n          setValue(selectElem.value);\r\n        }}\r\n      >\r\n        {\r\n          alteredOptions.map((item, i) => {\r\n            return (\r\n              <option\r\n                key={item}\r\n                disabled={i === 0}\r\n              >\r\n                {item}\r\n              </option>\r\n            );\r\n          })\r\n        }\r\n      </select>\r\n      <span\r\n        className={`err-msg`}\r\n      >\r\n        {errorMsg}\r\n      </span>\r\n    </label>\r\n  );\r\n}\r\n\r\nCombobox.defaultProps = {\r\n  id: '',\r\n  className: '',\r\n  fieldName: '',\r\n  options: [],\r\n  errorMsg: '',\r\n  onChange: () => {}\r\n};\r\n\r\nexport default Combobox;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport Combobox from '../Combobox/combobox';\r\nimport { generateId } from '../utils';\r\nimport './whoPaid.css';\r\n\r\nfunction WhoPaid(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    itemName,\r\n    people,\r\n    onChange\r\n  } = props;\r\n\r\n  const [value, setValue] = useState({});\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const thisRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {`${title} `}\r\n        <span\r\n          className={`${className}__item-name`}\r\n        >\r\n          {itemName}\r\n        </span>\r\n      </h1>\r\n\r\n      <Combobox\r\n        options={people}\r\n        errorMsg=\"\"\r\n        onChange={(e) => {\r\n          const comboboxElem = e.currentTarget;\r\n          const newValue = {};\r\n          newValue[itemName] = comboboxElem.value;\r\n          setValue(newValue);\r\n        }}\r\n      />\r\n\r\n      <button>\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nWhoPaid.defaultProps = {\r\n  id: '',\r\n  className: 'who-paid',\r\n  title: 'Who Paid for ...',\r\n  itemName: '',\r\n  people: [],\r\n  onChange: () => {}\r\n};\r\n\r\nexport default WhoPaid;\r\n","import { useEffect, useState } from 'react';\nimport AddPeople from './AddPeople/addPeople';\nimport AddItems from './AddItems/addItems';\nimport WhoSharing from './WhoSharing/whoSharing';\nimport WhatCost from './WhatCost/whatCost';\nimport RadioGroup from './RadioGroup/radioGroup';\nimport WhoPaid from './WhoPaid/whoPaid';\nimport { calculate, calculateReturnText } from './utils';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n  const [items, setItems] = useState([]);\n  const [whoSharingJson, setWhoSharingJson] = useState({});\n  const [whatCostJson, setWhatCostJson] = useState({});\n  const [whoPaidJson, setWhoPaidJson] = useState({});\n\n  useEffect(() => {\n    calculate({\n      people,\n      items,\n      whoSharingJson,\n      whatCostJson,\n      whoPaidJson\n    });\n\n  }, [people,\n      items,\n      whoSharingJson,\n      whatCostJson,\n      whoPaidJson\n  ]);\n\n  const updatePeople = (data) => {\n    setPeople(data);\n  };\n\n  const updateItems = (data) => {\n    setItems(data);\n  };\n\n  return (\n    <div className=\"App\">\n      <AddPeople\n        listDidUpdate={updatePeople}\n      />\n      <AddItems\n        listDidUpdate={updateItems}\n      />\n\n      {\n        items.map(\n          item => (\n            <WhoSharing\n              key={item}\n              itemName={item}\n              people={people}\n              onChange={(e) => {\n                const whoSharingElem = e.currentTarget;\n                const newValue = {\n                  ...whoSharingJson,\n                  ...whoSharingElem.value\n                }\n                console.log(newValue);\n                setWhoSharingJson(newValue);\n              }}\n            />\n          )\n        )\n      }\n\n      {\n        items.map(\n          item => (\n            <WhoPaid\n              key={item}\n              itemName={item}\n              people={people}\n              onChange={(e) => {\n                const whoPaidElem = e.currentTarget;\n                const newValue = {\n                  ...whoPaidJson,\n                  ...whoPaidElem.value\n                }\n                console.log(newValue);\n                setWhoPaidJson(newValue);\n              }}\n            />\n          )\n        )\n      }\n\n      {\n        items.map(\n          item => (\n            <WhatCost\n              key={item}\n              itemName={item}\n              onChange={(e) => {\n                const whatCostElem = e.currentTarget;\n                const newValue = {\n                  ...whatCostJson,\n                  ...whatCostElem.value\n                }\n                console.log(newValue);\n                setWhatCostJson(newValue);\n              }}\n            />\n          )\n        )\n      }\n\n      <pre className=\"App__results code\">\n        {\n          calculateReturnText({\n              people,\n              items,\n              whoSharingJson,\n              whatCostJson,\n              whoPaidJson\n          })\n        }\n      </pre>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}