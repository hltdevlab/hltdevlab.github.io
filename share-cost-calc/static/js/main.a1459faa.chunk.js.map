{"version":3,"sources":["ListItems/listItems.js","AddItems/addItems.js","AddPeople/addPeople.js","Transaction.js","PayableTransaction.js","Ledger.js","utils.js","CheckboxGroup/checkboxGroup.js","WhoSharing/whoSharing.js","WhatCost/whatCost.js","RadioGroup/radioGroup.js","Combobox/combobox.js","WhoPaid/whoPaid.js","calcUtils.js","App.js","reportWebVitals.js","index.js"],"names":["ListItems","props","className","propsItems","items","updateItems","useState","setItems","useEffect","JSON","stringify","onDelClick","e","itemToDelete","currentTarget","parentElement","querySelector","textContent","trim","resultItems","filter","item","map","onClick","defaultProps","id","AddItems","title","fieldName","listDidUpdate","_setItems","errorMsg","setErrorMsg","itemsRef","useRef","data","current","itemInputRef","nameInput","addEventListener","onKeyup","removeEventListener","isValidInput","keyCode","onAdd","value","includes","isDuplicated","focus","htmlFor","type","ref","onBlur","AddPeople","Transaction","description","amount","this","transaction","Utils","PayablePayableTransaction","personToPayTo","PAYABLE_TRANSACTION_DESC_PREFIX","regex","RegExp","replace","Ledger","person","transactions","payableTransactions","descriptionToAdd","getDescription","amountToAdd","getAmount","foundTransaction","find","payableTransaction","existingAmount","setAmount","PayableTransaction","getPersonToPayTo","personToFind","payableTransactionToDelete","equals","str","forEach","toString","toCssSelectorSafeString","name","result","replaceAll","isArrayEmpty","array","undefined","length","isObjectEmpty","object","to2DecimalStr","floatValue","resultFloat","Math","round","to2Decimal","resultStr","String","isIntegerRegex","match","isOneDecimalPlaceOnlyRegex","CheckboxGroup","options","onChange","selectAllToggle","setSelectAllToggle","setValue","thisRef","generateValue","thisElem","newValue","querySelectorAll","checkbox","checked","option","derivedItemId","WhoSharing","itemName","people","checkboxGroupElem","WhatCost","inputRef","step","min","inputElem","parseFloat","isNaN","max","validateInput","RadioGroup","derivedOptionId","onSelect","Combobox","selectRef","alteredOptions","selectElem","i","disabled","WhoPaid","idPrefix","comboboxElem","calculate","whoSharingJson","whatCostJson","whoPaidJson","ledgers","cost","ledger","addTransaction","isSharedBy","peopleSharingThisItem","costPerPerson","getTransactions","transction","personToPay","addPayableTransaction","Object","entries","pairs","findPayableTransactionPairs","processPayableTransactionPairs","console","log","generateSummary","person1","ledger1","getPayableTransactions","person1PayableTransaction","person2","ledger2","person2PayableTransaction","pair","push","payableTransactionPairs","payableTransactionPair","payableTransaction1","payableTransaction2","deletePayableTransaction","summaryStr","personWhoPaid","peopleBooleanJson","peopleYes","peopleNo","App","setPeople","resultText","setResultText","setWhoSharingJson","setWhatCostJson","setWhoPaidJson","keys","key","text","calculateReturnText","updatePeople","whoSharingElem","prevWhoSharingJson","whoPaidElem","prevWhoPaidJson","whatCostElem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1459faa.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport './listItems.css';\r\n\r\nfunction ListItems(props) {\r\n    const {\r\n        className,\r\n        items: propsItems,\r\n        updateItems\r\n    } = props;\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const propsItemsStr = JSON.stringify(propsItems);\r\n        const itemsStr = JSON.stringify(items);\r\n        if (propsItemsStr !== itemsStr) {\r\n            setItems([...propsItems]);\r\n        }\r\n    }, [propsItems]);\r\n\r\n    useEffect(() => {\r\n        updateItems(items);\r\n    }, [items]);\r\n\r\n    const onDelClick = (e) => {\r\n        const parentElem = e.currentTarget.parentElement;\r\n        const spanElem = parentElem.querySelector(`.${className}__item-text`);\r\n        const itemToDelete = spanElem.textContent.trim();\r\n\r\n        const resultItems = items.filter((item) => (item !== itemToDelete));\r\n        setItems([...resultItems]);\r\n    }\r\n\r\n    return (\r\n        <ul className={className}>\r\n            {\r\n                items.map(\r\n                    item => (\r\n                        <li\r\n                            key={item}\r\n                            className={`${className}__item`}\r\n                        >\r\n                            <div className={`${className}__item-text`}>\r\n                                {item}\r\n                            </div>\r\n                            <div className={`${className}__item-dots`} />\r\n                            <button\r\n                                onClick={onDelClick}\r\n                            >\r\n                                X\r\n                            </button>\r\n                        </li>\r\n                    )\r\n                )\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nListItems.defaultProps = {\r\n    id: 'list-items',\r\n    className: 'list-items',\r\n    items: [],\r\n    updateItems: (items) => {}\r\n  };\r\n\r\nexport default ListItems;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport ListItems from '../ListItems/listItems';\r\nimport './addItems.css';\r\n\r\nfunction AddItems(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    fieldName,\r\n    listDidUpdate\r\n  } = props;\r\n  \r\n  const [items, _setItems] = useState([]);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const itemsRef = useRef(items);\r\n  const setItems = (data) => {\r\n    itemsRef.current = data;\r\n    _setItems(data);\r\n  };\r\n\r\n  const itemInputRef = useRef(null);\r\n\r\n  // Lifecycle useEffect\r\n  useEffect(() => {\r\n    // console.log('component did mount');\r\n    const nameInput = itemInputRef.current;\r\n    nameInput.addEventListener('keyup', onKeyup);\r\n\r\n    return () => {\r\n      // console.log('component will unmount');\r\n      nameInput.removeEventListener('keyup', onKeyup);\r\n    };\r\n  }, []);\r\n\r\n  // Updating container when items changes\r\n  useEffect(() => {\r\n    // console.log('Updating container: ' + items);\r\n    listDidUpdate(items);\r\n    isValidInput();\r\n  }, [items]);\r\n  \r\n  // handler functions\r\n  const onKeyup = (e) => {\r\n    isValidInput();\r\n    if (13 === e.keyCode) {\r\n      onAdd();\r\n    }\r\n\r\n    // updateErrorMsg();\r\n  };\r\n\r\n  /*\r\n  const updateErrorMsg = () => {\r\n    const nameInput = itemInputRef.current;\r\n    if (nameInput.value.trim() === '') {\r\n      setErrorMsg(`${fieldName} cannot be blank!`);\r\n    }\r\n    else if (isDuplicated(nameInput.value)) {\r\n      setErrorMsg(`${fieldName} already exist!`);\r\n    }\r\n    else {\r\n      setErrorMsg('');\r\n    }\r\n  };\r\n  */\r\n\r\n  const isDuplicated = (value) => {\r\n    return itemsRef.current.includes(value);\r\n  };\r\n\r\n  const isValidInput = () => {\r\n    const nameInput = itemInputRef.current;\r\n    const value = nameInput.value.trim();\r\n\r\n    if (isDuplicated(value)) {\r\n      setErrorMsg(`${fieldName} already exist!`);\r\n      return false;\r\n    }\r\n\r\n    setErrorMsg('');\r\n    return true;\r\n  };\r\n\r\n  const onAdd = (e) => {\r\n    const nameInput = itemInputRef.current;\r\n    const value = nameInput.value.trim();\r\n    nameInput.focus();\r\n\r\n    if (value === '') {\r\n      setErrorMsg(`${fieldName} cannot be blank!`);\r\n      return;\r\n    }\r\n\r\n    if (isValidInput()) {\r\n      setItems([...itemsRef.current, value]);\r\n      nameInput.value = '';\r\n      // updateErrorMsg();\r\n    }\r\n  };\r\n\r\n  const onInputBlur = (e) => {\r\n    const nameInput = itemInputRef.current;\r\n    const value = nameInput.value.trim();\r\n\r\n    // so that when not in focus and the text field is blank, can clear the error message.\r\n    if (value === '') {\r\n      setErrorMsg('');\r\n    }\r\n  };\r\n\r\n  const updateItems = (items) => {\r\n    setItems([...items]);\r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {title}\r\n      </h1>\r\n\r\n      <label\r\n        className={`${className}__lbl`}\r\n        htmlFor={`${id}__input`}\r\n      >\r\n        <span\r\n          className={`${className}__lbl-span`}\r\n        >\r\n          {`${fieldName}:`}\r\n        </span>\r\n        <input\r\n          id={`${id}__input`}\r\n          className={\r\n            errorMsg ? \r\n            `${className}__input-txt ${className}__input-txt--err`\r\n            : `${className}__input-txt`\r\n          }\r\n          type=\"text\"\r\n          ref={itemInputRef}\r\n          onBlur={onInputBlur}\r\n        />\r\n        <span\r\n          className={`err-msg`}\r\n        >\r\n          {errorMsg}\r\n        </span>\r\n      </label>\r\n\r\n      <button\r\n        className={`${className}__btn`}\r\n        onClick={onAdd}\r\n      >\r\n        Add\r\n      </button>\r\n      <ListItems\r\n        items={items}\r\n        updateItems={updateItems}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nAddItems.defaultProps = {\r\n  id: 'add-items',\r\n  className: 'add-items',\r\n  title: 'Adding Items...',\r\n  fieldName: 'Item',\r\n  listDidUpdate: () => {}\r\n};\r\n\r\nexport default AddItems;\r\n","import AddItems from '../AddItems/addItems';\r\n\r\nfunction AddPeople(props) {\r\n  // renderer\r\n  return (\r\n    <AddItems\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nAddPeople.defaultProps = {\r\n  id: 'add-people',\r\n  title: 'Adding People...',\r\n  fieldName: 'Name',\r\n  listDidUpdate: () => {}\r\n};\r\n\r\nexport default AddPeople;\r\n","import * as Utils from './utils';\r\n\r\nclass Transaction {\r\n    constructor(description, amount) {\r\n        this.description = description;\r\n        this.amount = amount;\r\n    }\r\n\r\n    getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n    getAmount() {\r\n        return this.amount;\r\n        // return this.__to2Decimal(this.amount);\r\n    }\r\n\r\n    setAmount(amount) {\r\n        this.amount = amount;\r\n    }\r\n\r\n    equals(transaction) {\r\n        const transactionStr1 = JSON.stringify(this);\r\n        const transactionStr2 = JSON.stringify(transaction);\r\n        return (transactionStr1 === transactionStr2);\r\n    }\r\n\r\n    toString() {\r\n        return `${this.description}: $${Utils.to2DecimalStr(this.amount)}`;\r\n    }\r\n};\r\n\r\nexport default Transaction;","import Transaction from './Transaction';\r\n\r\nclass PayablePayableTransaction extends Transaction {\r\n    PAYABLE_TRANSACTION_DESC_PREFIX = 'pay to ';\r\n\r\n    constructor(personToPayTo, amount) {\r\n        super(personToPayTo, amount);\r\n        this.description = `${this.PAYABLE_TRANSACTION_DESC_PREFIX}${personToPayTo}`;\r\n    }\r\n\r\n    getPersonToPayTo() {\r\n        const regex = new RegExp(\r\n            `(${this.PAYABLE_TRANSACTION_DESC_PREFIX})*`,\r\n            'i'\r\n        );\r\n        const personToPayTo = this.description.replace(regex, '');\r\n        return personToPayTo;\r\n    }\r\n};\r\n\r\nexport default PayablePayableTransaction;","import PayableTransaction from './PayableTransaction';\r\n\r\nclass Ledger {\r\n    constructor(person) {\r\n        this.person = person;\r\n        this.transactions = [];\r\n        this.payableTransactions = [];\r\n    }\r\n\r\n    getTransactions() {\r\n        return this.transactions;\r\n    }\r\n\r\n    addTransaction(transaction) {\r\n        this.transactions = [...this.transactions, transaction];\r\n    }\r\n\r\n    getPayableTransactions() {\r\n        return this.payableTransactions;\r\n    }\r\n\r\n    addPayableTransaction_old(transaction) {\r\n        const descriptionToAdd = transaction.getDescription();\r\n        const amountToAdd = transaction.getAmount();\r\n\r\n        const foundTransaction = this.payableTransactions.find((payableTransaction) => {\r\n            const existingDescription = payableTransaction.getDescription();\r\n            return (existingDescription === descriptionToAdd);\r\n        });\r\n\r\n        if (foundTransaction) {\r\n            // update existing payableTransactions\r\n            const existingAmount = foundTransaction.getAmount();\r\n            foundTransaction.setAmount(\r\n                existingAmount + amountToAdd\r\n            );\r\n        }\r\n        else {\r\n            // add new entry to payableTransactions\r\n            this.payableTransactions = [...this.payableTransactions, transaction];\r\n        }\r\n    }\r\n\r\n    addPayableTransaction(personToPayTo, amount) {\r\n        const transaction = new PayableTransaction(personToPayTo, amount)\r\n\r\n        const foundTransaction = this.payableTransactions.find((payableTransaction) => {\r\n            const existingPersonToPayTo = payableTransaction.getPersonToPayTo();\r\n            return (existingPersonToPayTo === personToPayTo);\r\n        });\r\n\r\n        if (foundTransaction) {\r\n            // update existing payableTransactions\r\n            const existingAmount = foundTransaction.getAmount();\r\n            foundTransaction.setAmount(\r\n                existingAmount + amount\r\n            );\r\n        }\r\n        else {\r\n            // add new entry to payableTransactions\r\n            this.payableTransactions = [...this.payableTransactions, transaction];\r\n        }\r\n    }\r\n\r\n    findPayableTransaction(personToFind) {\r\n        const payableTransaction = this.payableTransactions\r\n            .find((payableTransaction) => (\r\n                payableTransaction.getPersonToPayTo() === personToFind\r\n            ));\r\n        return payableTransaction;\r\n    }\r\n\r\n    deletePayableTransaction(payableTransactionToDelete) {\r\n        this.payableTransactions = this.payableTransactions.filter((payableTransaction) => {\r\n            return (!payableTransaction.equals(payableTransactionToDelete))\r\n        });\r\n    }\r\n\r\n    toString() {\r\n        let str = `${this.person}:\\n`;\r\n        this.transactions.forEach((transaction) => {\r\n            str += `  ${transaction.toString()}\\n`\r\n        });\r\n        str += `  ----------\\n`;\r\n        this.payableTransactions.forEach((transaction) => {\r\n            str += `  ${transaction.toString()}\\n`\r\n        });\r\n        str += `  ==========\\n\\n`;\r\n        return str;\r\n    }\r\n};\r\n\r\nexport default Ledger;","import Ledger from './Ledger';\r\nimport Transaction from './Transaction';\r\n\r\nexport const toCssSelectorSafeString = (name) => {\r\n    // invalid characters:\r\n    // ~ ! @ $ % ^ & * ( ) + = , . / ‘ ; : ” ? > < [ ] \\ { } | ` # <space>\r\n    const regex = /[~ ! @ $ % ^ & * ( ) + = , . / ‘ ; : ” ? > < \\[ \\] \\\\ { } | ` #]/g;\r\n    let result = '_';\r\n    result += name\r\n        .replaceAll(regex, '-')\r\n        .replaceAll('--', '-');\r\n\r\n    return result;\r\n};\r\n\r\nexport const isArrayEmpty = (array) => {\r\n    return (\r\n        array === undefined\r\n        || array === null\r\n        || array.length === 0\r\n    );\r\n};\r\n\r\nexport const isObjectEmpty = (object) => {\r\n    return (\r\n        object === undefined\r\n        || object === null\r\n        || JSON.stringify({}) === JSON.stringify(object)\r\n    );\r\n};\r\n\r\nexport const to2Decimal = (floatValue) => {\r\n    return Math.round(floatValue * 100) / 100;\r\n};\r\n\r\nexport const to2DecimalStr = (floatValue) => {\r\n    const resultFloat = to2Decimal(floatValue);\r\n    const resultStr = String(resultFloat);\r\n\r\n    const isIntegerRegex = new RegExp(\r\n        '^-*\\\\d+$',\r\n        'i'\r\n    );\r\n    if (resultStr.match(isIntegerRegex)) {\r\n        return resultStr;\r\n    }\r\n\r\n    // if float value only has one decimal place, append a '0' behind.\r\n    const isOneDecimalPlaceOnlyRegex = new RegExp(\r\n        '^-*\\\\d+\\\\.\\\\d$',\r\n        'i'\r\n    );\r\n    if (resultStr.match(isOneDecimalPlaceOnlyRegex)) {\r\n        return `${resultStr}0`;\r\n    }\r\n\r\n    return resultStr;\r\n};\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { toCssSelectorSafeString } from '../utils';\r\nimport \"./checkboxGroup.css\";\r\n\r\nfunction CheckboxGroup(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    name,\r\n    options,\r\n    onChange\r\n  } = props;\r\n\r\n  const [selectAllToggle, setSelectAllToggle] = useState(false);\r\n  const [value, setValue] = useState({});\r\n\r\n  const thisRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    generateValue();\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  const generateValue = () => {\r\n    const thisElem = thisRef.current;\r\n    let newValue = {};\r\n    const checkboxes = thisElem.querySelectorAll('input[type=\"checkbox\"]');\r\n    checkboxes.forEach((checkbox) => {\r\n      newValue[checkbox.value] = checkbox.checked;\r\n    });\r\n    setValue(newValue);\r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      {\r\n        options.map(\r\n          (option) => {\r\n            const derivedItemId = toCssSelectorSafeString(option);\r\n            \r\n            return (\r\n              <label\r\n                key={option}\r\n                htmlFor={`${id}__${derivedItemId}`}\r\n                >\r\n                <input\r\n                  id={`${id}__${derivedItemId}`}\r\n                  className={`${className}__checkbox`}\r\n                  type=\"checkbox\"\r\n                  name={name}\r\n                  value={option}\r\n                  onChange={(e) => {\r\n                    generateValue();\r\n                  }}\r\n                />\r\n                <span>{option}</span>\r\n              </label>\r\n            );\r\n          }\r\n        )\r\n      }\r\n      <button\r\n        onClick={() => {\r\n          const thisElem = thisRef.current;\r\n          const checkboxes = thisElem.querySelectorAll('input[type=\"checkbox\"]');\r\n          checkboxes.forEach((checkbox) => {\r\n            checkbox.checked = !selectAllToggle;\r\n          });\r\n          setSelectAllToggle(!selectAllToggle);\r\n\r\n          generateValue();\r\n        }}\r\n      >\r\n        Select/Deselect All\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nCheckboxGroup.defaultProps = {\r\n  id: '',\r\n  className: 'checkbox-group',\r\n  name: '',\r\n  options: [],\r\n  onChange: () => {}\r\n};\r\n\r\nexport default CheckboxGroup;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport CheckboxGroup from '../CheckboxGroup/checkboxGroup';\r\nimport { toCssSelectorSafeString } from '../utils';\r\nimport './whoSharing.css';\r\n\r\nfunction WhoSharing(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    itemName,\r\n    people,\r\n    onChange\r\n  } = props;\r\n\r\n  const [value, setValue] = useState({});\r\n  const thisRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {`${title} `}\r\n        <span\r\n          className={`${className}__item-name`}\r\n        >\r\n          {itemName}\r\n        </span>\r\n      </h1>\r\n\r\n      <CheckboxGroup\r\n        id={toCssSelectorSafeString(itemName)}\r\n        name={toCssSelectorSafeString(itemName)}\r\n        options={people}\r\n        onChange={(e) => {\r\n          const checkboxGroupElem = e.currentTarget;\r\n          const newValue = {};\r\n          newValue[itemName] = checkboxGroupElem.value;\r\n          setValue(newValue);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nWhoSharing.defaultProps = {\r\n  id: '',\r\n  className: 'who-sharing',\r\n  title: 'Who Sharing...',\r\n  itemName: '',\r\n  people: [],\r\n  onChange: () => {}\r\n};\r\n\r\nexport default WhoSharing;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport './whatCost.css';\r\n\r\nfunction WhatCost(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    title,\r\n    itemName,\r\n    fieldName,\r\n    onChange\r\n  } = props;\r\n  \r\n  const [value, setValue] = useState({});\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const thisRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n  \r\n  // handler functions\r\n  const validateInput = () => {\r\n    const inputElem = inputRef.current;\r\n    const floatValue = parseFloat(inputElem.value);\r\n\r\n    if (isNaN(floatValue)) {\r\n      setErrorMsg('Please input valid number.');\r\n    }\r\n    else if (inputElem.min && floatValue < inputElem.min) {\r\n      setErrorMsg(`Value must not be lesser than ${inputElem.min}.`);\r\n    }\r\n    else if (inputElem.max && floatValue > inputElem.max) {\r\n      setErrorMsg(`Value must not be more than ${inputElem.max}.`);\r\n    }\r\n    else {\r\n      setErrorMsg('');\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const _onChange = (e) => {\r\n    validateInput();\r\n    const inputElem = inputRef.current;\r\n    const newValue = {};\r\n    const floatValue = parseFloat(inputElem.value);\r\n    newValue[itemName] = floatValue;\r\n    setValue(newValue);\r\n    \r\n  };\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {`${title} `}\r\n        <span\r\n          className={`${className}__item-name`}\r\n        >\r\n          {itemName}\r\n        </span>\r\n      </h1>\r\n\r\n      <label\r\n        className={`${className}__lbl`}\r\n        htmlFor={`${id}__input`}\r\n      >\r\n        <span\r\n          className={`${className}__lbl-span`}\r\n        >\r\n          {`${fieldName}:`}\r\n        </span>\r\n        <input\r\n          id={`${id}__input`}\r\n          className={\r\n            errorMsg ? \r\n            `${className}__input-txt ${className}__input-txt--err`\r\n            : `${className}__input-txt`\r\n          }\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          min=\"0\"\r\n          ref={inputRef}\r\n          onChange={_onChange}\r\n        />\r\n        <span\r\n          className={`err-msg`}\r\n        >\r\n          {errorMsg}\r\n        </span>\r\n      </label>\r\n\r\n      <button\r\n        className={`${className}__btn`}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nWhatCost.defaultProps = {\r\n  id: 'what-cost',\r\n  className: 'what-cost',\r\n  title: 'What is the Cost of ...',\r\n  itemName: '',\r\n  fieldName: 'Cost ($)',\r\n  onChange: () => {}\r\n};\r\n\r\nexport default WhatCost;\r\n","import { useState } from \"react\";\r\nimport { toCssSelectorSafeString } from '../utils';\r\n\r\nfunction RadioGroup(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    name,\r\n    options\r\n  } = props;\r\n\r\n  const [selectAllToggle, setSelectAllToggle] = useState(false);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={id}\r\n      className={className}\r\n    >\r\n      {\r\n        options.map(\r\n          (option) => {\r\n            const derivedOptionId = toCssSelectorSafeString(option);\r\n            \r\n            return (\r\n              <label\r\n                key={option}\r\n                htmlFor={`${id}__${derivedOptionId}`}\r\n                >\r\n                <span>{`${option}:`}</span>\r\n                <input\r\n                  id={`${id}__${derivedOptionId}`}\r\n                  className={`${className}__radio`}\r\n                  name={name}\r\n                  type=\"radio\"\r\n                />\r\n              </label>\r\n            );\r\n          }\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nRadioGroup.defaultProps = {\r\n  id: '',\r\n  className: 'radio-group',\r\n  name: '',\r\n  options: [],\r\n  onSelect: () => {}\r\n};\r\n\r\nexport default RadioGroup;\r\n","\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport AddItems from '../AddItems/addItems';\r\n\r\nfunction Combobox(props) {\r\n  const {\r\n    id,\r\n    className,\r\n    fieldName,\r\n    options,\r\n    errorMsg,\r\n    onChange\r\n  } = props;\r\n\r\n  const [value, setValue] = useState(null);\r\n\r\n  const thisRef = useRef(null);\r\n  const selectRef = useRef(null);\r\n  \r\n  const alteredOptions = [\"Please choose...\", ...options];\r\n\r\n  useEffect(() => {\r\n    const selectElem = selectRef.current;\r\n    selectElem.value = alteredOptions[0]; // set initial value\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // reset to initial value if options changed and current value is invalid.\r\n    if (!alteredOptions.includes(value)) {\r\n      const selectElem = selectRef.current;\r\n      selectElem.value = alteredOptions[0]; // set initial value\r\n      setValue(null); // set initial value and trigger update\r\n    }\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  // renderer\r\n  return (\r\n    <label\r\n      htmlFor={id}\r\n      ref={thisRef}\r\n    >\r\n      <span>\r\n        {fieldName ? `${fieldName}:` : ''}\r\n      </span>\r\n      <select\r\n        id={id}\r\n        className={className}\r\n        ref={selectRef}\r\n        onChange={(e) => {\r\n          const selectElem = selectRef.current;\r\n          setValue(selectElem.value);\r\n        }}\r\n      >\r\n        {\r\n          alteredOptions.map((item, i) => {\r\n            return (\r\n              <option\r\n                key={item}\r\n                disabled={i === 0}\r\n              >\r\n                {item}\r\n              </option>\r\n            );\r\n          })\r\n        }\r\n      </select>\r\n      <span\r\n        className={`err-msg`}\r\n      >\r\n        {errorMsg}\r\n      </span>\r\n    </label>\r\n  );\r\n}\r\n\r\nCombobox.defaultProps = {\r\n  id: '',\r\n  className: '',\r\n  fieldName: '',\r\n  options: [],\r\n  errorMsg: '',\r\n  onChange: () => {}\r\n};\r\n\r\nexport default Combobox;\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport Combobox from '../Combobox/combobox';\r\nimport { toCssSelectorSafeString } from '../utils';\r\nimport './whoPaid.css';\r\n\r\nfunction WhoPaid(props) {\r\n  const {\r\n    idPrefix,\r\n    className,\r\n    title,\r\n    itemName,\r\n    people,\r\n    onChange\r\n  } = props;\r\n\r\n  const [value, setValue] = useState({});\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const thisRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const thisElem = thisRef.current;\r\n    thisElem.value = value;\r\n    const e = {\r\n      currentTarget: thisElem\r\n    }\r\n    onChange(e);\r\n  }, [value]);\r\n\r\n  // renderer\r\n  return (\r\n    <div\r\n      id={`${idPrefix}-${toCssSelectorSafeString(itemName)}`}\r\n      className={className}\r\n      ref={thisRef}\r\n    >\r\n      <h1\r\n        className={`${className}__title`}\r\n      >\r\n        {`${title} `}\r\n        <span\r\n          className={`${className}__item-name`}\r\n        >\r\n          {itemName}\r\n        </span>\r\n      </h1>\r\n\r\n      <Combobox\r\n        id={`${idPrefix}-${toCssSelectorSafeString(itemName)}__combobox`}\r\n        options={people}\r\n        errorMsg=\"\"\r\n        onChange={(e) => {\r\n          const comboboxElem = e.currentTarget;\r\n          const newValue = {};\r\n          if (comboboxElem.value) {\r\n            newValue[itemName] = comboboxElem.value;\r\n            setValue(newValue);\r\n          }\r\n          else {\r\n            setValue(null);\r\n          }\r\n        }}\r\n      />\r\n\r\n      <button>\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nWhoPaid.defaultProps = {\r\n  idPrefix: 'who-paid',\r\n  className: 'who-paid',\r\n  title: 'Who Paid for ...',\r\n  itemName: '',\r\n  people: [],\r\n  onChange: () => {}\r\n};\r\n\r\nexport default WhoPaid;\r\n","import * as Utils from './utils';\r\nimport Ledger from './Ledger';\r\nimport Transaction from './Transaction';\r\n\r\nexport const calculateReturnText = ({\r\n    people,\r\n    items,\r\n    whoSharingJson,\r\n    whatCostJson,\r\n    whoPaidJson\r\n}) => {\r\n    const ledgers = calculate({\r\n        people,\r\n        items,\r\n        whoSharingJson,\r\n        whatCostJson,\r\n        whoPaidJson\r\n    });\r\n\r\n    if (!ledgers) {\r\n        return '';\r\n    }\r\n\r\n    let text = generateSummary({\r\n        people,\r\n        items,\r\n        whoSharingJson,\r\n        whatCostJson,\r\n        whoPaidJson\r\n    });\r\n    text += '********************\\n\\n';\r\n\r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        text += ledger.toString();\r\n    }\r\n    return text;\r\n};\r\n\r\n\r\nexport const calculate = ({\r\n    people,\r\n    items,\r\n    whoSharingJson,\r\n    whatCostJson,\r\n    whoPaidJson\r\n}) => {\r\n    if (\r\n        Utils.isArrayEmpty(people)\r\n        || Utils.isArrayEmpty(items)\r\n        || Utils.isObjectEmpty(whoSharingJson)\r\n        || Utils.isObjectEmpty(whatCostJson)\r\n        || Utils.isObjectEmpty(whoPaidJson)\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    \r\n    const ledgers = {};\r\n    people.forEach((person) => {\r\n        ledgers[person] = new Ledger(person);\r\n    });\r\n\r\n    items.forEach((item) => {\r\n        const cost = whatCostJson[item];\r\n        const person = whoPaidJson[item];\r\n        const ledger = ledgers[person]\r\n        if (ledger) {\r\n            ledger.addTransaction(\r\n                new Transaction(item, (-cost))\r\n            );\r\n        }\r\n    });\r\n\r\n    items.forEach((item) => {\r\n        const cost = whatCostJson[item];\r\n        const isSharedBy = whoSharingJson[item];\r\n\r\n        if (isSharedBy) {\r\n            const peopleSharingThisItem = people.filter(\r\n                (person) => (isSharedBy[person])\r\n            );\r\n    \r\n            const costPerPerson = cost / peopleSharingThisItem.length;\r\n    \r\n            peopleSharingThisItem.forEach((person) => {\r\n                ledgers[person].addTransaction(\r\n                    new Transaction(item, costPerPerson)\r\n                );\r\n            });\r\n        }\r\n    });\r\n\r\n    \r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        const transctions = ledger.getTransactions();\r\n        transctions.filter(\r\n            // filter all transaction that is negative,\r\n            // which means initially paid transaction.\r\n            (transction) => (transction.getAmount() > 0)\r\n        ).filter(\r\n            // filter all transaction that is paid by\r\n            // this person.\r\n            (transction) => {\r\n                const item = transction.getDescription();\r\n                const personToPay = whoPaidJson[item];\r\n                return (person != personToPay);\r\n            }\r\n        ).forEach((transction) => {\r\n            const item = transction.getDescription();\r\n            const amount = transction.getAmount();\r\n            const personToPay = whoPaidJson[item];\r\n            if (personToPay) {\r\n                ledger.addPayableTransaction(personToPay, amount);\r\n            }\r\n        });\r\n    }\r\n\r\n    // checking for loop transaction, negate the amount accordingly.\r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        const pairs = findPayableTransactionPairs(person, ledgers);\r\n        processPayableTransactionPairs(pairs);\r\n    }\r\n\r\n    // print logs\r\n    console.log(JSON.stringify(ledgers, null, 2));\r\n    for (const [person, ledger] of Object.entries(ledgers)) {\r\n        console.log(ledger.toString());\r\n    }\r\n\r\n    generateSummary({\r\n        people,\r\n        whoSharingJson,\r\n        whatCostJson,\r\n        whoPaidJson\r\n    });\r\n\r\n    return ledgers;\r\n};\r\n\r\nexport const findPayableTransactionPairs = (person1, ledgers) => {\r\n    const pairs = [];\r\n    const ledger1 = ledgers[person1];\r\n    const person1PayableTransactions = ledger1.getPayableTransactions();\r\n    person1PayableTransactions.forEach(person1PayableTransaction => {\r\n        const person2 = person1PayableTransaction.getPersonToPayTo();\r\n        const ledger2 = ledgers[person2];\r\n        const person2PayableTransactions = ledger2.getPayableTransactions();\r\n        person2PayableTransactions.forEach(person2PayableTransaction => {\r\n            const anotherPerson1 = person2PayableTransaction.getPersonToPayTo();\r\n            if (anotherPerson1 === person1) {\r\n                const pair = [{\r\n                    ledger: ledger1,\r\n                    payableTransaction: person1PayableTransaction\r\n                }, {\r\n                    ledger: ledger2,\r\n                    payableTransaction: person2PayableTransaction\r\n                }];\r\n\r\n                pairs.push(pair);\r\n            }\r\n        });\r\n    });\r\n    return pairs;\r\n};\r\n\r\nexport const processPayableTransactionPairs = (payableTransactionPairs) => {\r\n    payableTransactionPairs.forEach(payableTransactionPair => {\r\n        const ledger1 = payableTransactionPair[0].ledger;\r\n        const payableTransaction1 = payableTransactionPair[0].payableTransaction;\r\n        \r\n        const ledger2 = payableTransactionPair[1].ledger;\r\n        const payableTransaction2 = payableTransactionPair[1].payableTransaction;\r\n\r\n        if (payableTransaction1.getAmount() > payableTransaction2.getAmount()) {\r\n            payableTransaction1.setAmount(\r\n                payableTransaction1.getAmount() - payableTransaction2.getAmount()\r\n            );\r\n            ledger2.deletePayableTransaction(payableTransaction2);\r\n        }\r\n        else if (payableTransaction1.getAmount() < payableTransaction2.getAmount()) {\r\n            payableTransaction2.setAmount(\r\n                payableTransaction2.getAmount() - payableTransaction1.getAmount()\r\n            );\r\n            ledger1.deletePayableTransaction(payableTransaction1);\r\n        }\r\n        else {\r\n            // if amount equals\r\n            ledger1.deletePayableTransaction(payableTransaction1);\r\n            ledger2.deletePayableTransaction(payableTransaction2);\r\n        }\r\n    });\r\n};\r\n\r\nexport const generateSummary = ({\r\n    people,\r\n    whoSharingJson,\r\n    whatCostJson,\r\n    whoPaidJson\r\n}) => {\r\n    let summaryStr = '';\r\n\r\n    for (const [item, personWhoPaid] of Object.entries(whoPaidJson)) {\r\n        const cost = Utils.to2DecimalStr(whatCostJson[item]);\r\n        summaryStr += `${personWhoPaid} has paid $${cost} for ${item}.\\n`;\r\n    };\r\n\r\n    for (const [item, peopleBooleanJson] of Object.entries(whoSharingJson)) {\r\n        if (Utils.isObjectEmpty(peopleBooleanJson)) {\r\n            // this json is having the initial value of empty json, so no one is ticked for that item.\r\n            summaryStr += `Nobody is sharing the ${item}.\\n`;\r\n            continue;\r\n        }\r\n\r\n        const peopleYes = [];\r\n        const peopleNo = [];\r\n        for (const [person, boolValue] of Object.entries(peopleBooleanJson)) {\r\n            if (boolValue) {\r\n                peopleYes.push(person);\r\n            }\r\n            else {\r\n                peopleNo.push(person);\r\n            }\r\n        }\r\n\r\n        if (people.length === peopleYes.length) {\r\n            summaryStr += `Everyone is sharing the ${item}.\\n`;\r\n        }\r\n        else if (people.length === peopleNo.length) {\r\n            summaryStr += `Nobody is sharing the ${item}.\\n`;\r\n        }\r\n        else {\r\n            peopleYes.forEach((person, i) => {\r\n                if (i === 0) {\r\n                    // append nothing;\r\n                }\r\n                else if (i === peopleYes.length - 1) {\r\n                    summaryStr += ' and ';\r\n                }\r\n                else {\r\n                    summaryStr += ', ';\r\n                }\r\n\r\n                summaryStr += person;\r\n            });\r\n            summaryStr += ` is sharing the ${item}.\\n`;\r\n        }\r\n    };\r\n\r\n    console.log(summaryStr);\r\n    return summaryStr;\r\n};","import { useRef, useEffect, useState } from 'react';\n// import { SwitchTransition, CSSTransition } from \"react-transition-group\";\nimport AddPeople from './AddPeople/addPeople';\nimport AddItems from './AddItems/addItems';\nimport WhoSharing from './WhoSharing/whoSharing';\nimport WhatCost from './WhatCost/whatCost';\nimport RadioGroup from './RadioGroup/radioGroup';\nimport WhoPaid from './WhoPaid/whoPaid';\nimport { calculateReturnText } from './calcUtils';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n  const [items, setItems] = useState([]);\n  const [resultText, setResultText] = useState('');\n  const [index, setIndex] = useState(0);\n  const nodeRef = useRef(null);\n\n  /* json with item name as the keys */\n  const [whoSharingJson, setWhoSharingJson] = useState({});\n  const [whatCostJson, setWhatCostJson] = useState({});\n  const [whoPaidJson, setWhoPaidJson] = useState({});\n  /* ---------- */\n\n  useEffect(() => {\n    if(!whoSharingJson) return;\n\n    const keysToBeDelete = Object.keys(whoSharingJson)\n      .filter(key => (\n        !items.includes(key)\n      ));\n    \n    // ensuring the jsons only have valid items in it.\n    keysToBeDelete.forEach(key => {\n      delete whoSharingJson[key];\n      delete whatCostJson[key];\n      delete whoPaidJson[key];\n    });\n\n    setWhoSharingJson({...whoSharingJson});\n    setWhatCostJson({...whatCostJson});\n    setWhoPaidJson({...whoPaidJson});\n   }, [items]);\n\n  useEffect(() => {\n    // defining when to do the calculations.\n   setResultText(calculateReturnText({\n      people,\n      items,\n      whoSharingJson,\n      whatCostJson,\n      whoPaidJson\n    }));\n  }, [\n      whoSharingJson,\n      whatCostJson,\n      whoPaidJson\n  ]);\n\n  const updatePeople = (data) => {\n    setPeople(data);\n  };\n\n  const updateItems = (data) => {\n    setItems(data);\n  };\n\n  const cards = [(\n    <AddPeople\n      listDidUpdate={updatePeople}\n    />\n  ), (\n    <AddItems\n      listDidUpdate={updateItems}\n    />\n  )];\n\n  return (\n    <div className=\"App\">\n      {/*\n      <SwitchTransition mode=\"out-in\">\n        <CSSTransition\n          nodeRef={nodeRef}\n          key={index}\n          classNames=\"fade\"\n          timeout={1000}\n        >\n          <div ref={nodeRef}>\n            {cards[index]}\n          </div>\n        </CSSTransition>\n      </SwitchTransition>\n      <button\n        onClick={() => {\n          setIndex((prevIndex) => (prevIndex === 0 ? 1 : 0));\n        }}\n      >\n        Next\n      </button>\n      */}\n\n      <AddPeople\n        listDidUpdate={updatePeople}\n      />\n      <AddItems\n        listDidUpdate={updateItems}\n      />\n\n      {\n        items.map(\n          item => (\n            <WhoSharing\n              key={item}\n              itemName={item}\n              people={people}\n              onChange={(e) => {\n                const whoSharingElem = e.currentTarget;\n                setWhoSharingJson((prevWhoSharingJson) => {\n                  const newValue = {\n                    ...prevWhoSharingJson,\n                    ...whoSharingElem.value\n                  }\n                  console.log(newValue);\n                  return newValue;\n                });\n              }}\n            />\n          )\n        )\n      }\n\n      {\n        items.map(\n          item => (\n            <WhoPaid\n              key={item}\n              itemName={item}\n              people={people}\n              onChange={(e) => {\n                const whoPaidElem = e.currentTarget;\n                if (whoPaidElem.value) {\n                  setWhoPaidJson((prevWhoPaidJson) => {\n                    const newValue = {\n                      ...prevWhoPaidJson,\n                      ...whoPaidElem.value\n                    }\n                    console.log(newValue);\n                    return newValue;\n                  });\n                }\n                else {\n                  // when the person paying for this item, \n                  // has been removed.\n                  // that means this item has yet to be accounted for,\n                  // therefore remove that item from the json.\n                  setWhoPaidJson((prevWhoPaidJson) => {\n                    delete prevWhoPaidJson[item];\n                    const newValue = {\n                      ...prevWhoPaidJson\n                    }\n                    console.log(newValue);\n                    return newValue;\n                  });\n                }\n              }}\n            />\n          )\n        )\n      }\n\n      {\n        items.map(\n          item => (\n            <WhatCost\n              key={item}\n              itemName={item}\n              onChange={(e) => {\n                const whatCostElem = e.currentTarget;\n                const newValue = {\n                  ...whatCostJson,\n                  ...whatCostElem.value\n                }\n                console.log(newValue);\n                setWhatCostJson(newValue);\n              }}\n            />\n          )\n        )\n      }\n\n      <pre className=\"App__results code\">\n        {resultText}\n      </pre>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}